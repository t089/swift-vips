//
//  Conversion.generated.swift
//
//  Generated by VIPS Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// flip an image
    public func flip(nickname: String? = nil, description: String? = nil, direction: VipsDirection) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("direction", value: direction)
            opt.set("out", value: &out)

            try VIPSImage.call("flip", options: &opt)
        }
    }

    /// extract an area from an image
    public static func extractArea(input: VIPSImage, nickname: String? = nil, description: String? = nil, left: Int, top: Int, width: Int, height: Int) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("input", value: input)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("left", value: left)
            opt.set("top", value: top)
            opt.set("width", value: width)
            opt.set("height", value: height)
            opt.set("out", value: &out)

            try VIPSImage.call("extract_area", options: &opt)
        }
    }

    /// extract an area from an image
    public static func extractArea(input: VIPSImage, nickname: String? = nil, description: String? = nil, left: Int, top: Int, width: Int, height: Int) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("input", value: input)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("left", value: left)
            opt.set("top", value: top)
            opt.set("width", value: width)
            opt.set("height", value: height)
            opt.set("out", value: &out)

            try VIPSImage.call("extract_area", options: &opt)
        }
    }

    /// extract an area from an image
    public static func smartcrop(input: VIPSImage, nickname: String? = nil, description: String? = nil, width: Int, height: Int, interesting: VipsInteresting? = nil, premultiplied: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("input", value: input)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            opt.set("height", value: height)
            if let interesting = interesting {
                opt.set("interesting", value: interesting)
            }
            if let premultiplied = premultiplied {
                opt.set("premultiplied", value: premultiplied)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("smartcrop", options: &opt)
        }
    }

    /// scale an image to uchar
    public func scale(nickname: String? = nil, description: String? = nil, exp: Double? = nil, log: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let exp = exp {
                opt.set("exp", value: exp)
            }
            if let log = log {
                opt.set("log", value: log)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("scale", options: &opt)
        }
    }

    /// shrink an image
    public func shrink(nickname: String? = nil, description: String? = nil, hshrink: Double, vshrink: Double, ceil: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("hshrink", value: hshrink)
            opt.set("vshrink", value: vshrink)
            if let ceil = ceil {
                opt.set("ceil", value: ceil)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("shrink", options: &opt)
        }
    }

    /// shrink an image horizontally
    public func shrinkh(nickname: String? = nil, description: String? = nil, hshrink: Int, ceil: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("hshrink", value: hshrink)
            if let ceil = ceil {
                opt.set("ceil", value: ceil)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("shrinkh", options: &opt)
        }
    }

    /// shrink an image vertically
    public func shrinkv(nickname: String? = nil, description: String? = nil, vshrink: Int, ceil: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("vshrink", value: vshrink)
            if let ceil = ceil {
                opt.set("ceil", value: ceil)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("shrinkv", options: &opt)
        }
    }

    /// shrink an image horizontally
    public func reduceh(nickname: String? = nil, description: String? = nil, hshrink: Double, kernel: VipsKernel? = nil, gap: Double? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("hshrink", value: hshrink)
            if let kernel = kernel {
                opt.set("kernel", value: kernel)
            }
            if let gap = gap {
                opt.set("gap", value: gap)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("reduceh", options: &opt)
        }
    }

    /// shrink an image vertically
    public func reducev(nickname: String? = nil, description: String? = nil, vshrink: Double, kernel: VipsKernel? = nil, gap: Double? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("vshrink", value: vshrink)
            if let kernel = kernel {
                opt.set("kernel", value: kernel)
            }
            if let gap = gap {
                opt.set("gap", value: gap)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("reducev", options: &opt)
        }
    }

    /// reduce an image
    public func reduce(nickname: String? = nil, description: String? = nil, kernel: VipsKernel? = nil, gap: Double? = nil, hshrink: Double, vshrink: Double) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let kernel = kernel {
                opt.set("kernel", value: kernel)
            }
            if let gap = gap {
                opt.set("gap", value: gap)
            }
            opt.set("hshrink", value: hshrink)
            opt.set("vshrink", value: vshrink)
            opt.set("out", value: &out)

            try VIPSImage.call("reduce", options: &opt)
        }
    }

    /// affine transform of an image
    public func affine(nickname: String? = nil, interpolate: Any? = nil, description: String? = nil, matrix: [Double], oarea: [Int]? = nil, odx: Double? = nil, ody: Double? = nil, idx: Double? = nil, idy: Double? = nil, background: [Double]? = nil, premultiplied: Bool? = nil, extend: VipsExtend? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let interpolate = interpolate {
                opt.set("interpolate", value: interpolate)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("matrix", value: matrix)
            if let oarea = oarea {
                opt.set("oarea", value: oarea)
            }
            if let odx = odx {
                opt.set("odx", value: odx)
            }
            if let ody = ody {
                opt.set("ody", value: ody)
            }
            if let idx = idx {
                opt.set("idx", value: idx)
            }
            if let idy = idy {
                opt.set("idy", value: idy)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let premultiplied = premultiplied {
                opt.set("premultiplied", value: premultiplied)
            }
            if let extend = extend {
                opt.set("extend", value: extend)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("affine", options: &opt)
        }
    }

    /// resize an image
    public func resize(nickname: String? = nil, description: String? = nil, kernel: VipsKernel? = nil, gap: Double? = nil, vscale: Double? = nil, scale: Double) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let kernel = kernel {
                opt.set("kernel", value: kernel)
            }
            if let gap = gap {
                opt.set("gap", value: gap)
            }
            if let vscale = vscale {
                opt.set("vscale", value: vscale)
            }
            opt.set("scale", value: scale)
            opt.set("out", value: &out)

            try VIPSImage.call("resize", options: &opt)
        }
    }

}

//
//  Convolution.generated.swift
//
//  Generated by VIPS Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// convolution operation
    public func conv(nickname: String? = nil, description: String? = nil, mask: VIPSImage, precision: VipsPrecision? = nil, layers: Int? = nil, cluster: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: mask)
            if let precision = precision {
                opt.set("precision", value: precision)
            }
            if let layers = layers {
                opt.set("layers", value: layers)
            }
            if let cluster = cluster {
                opt.set("cluster", value: cluster)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("conv", options: &opt)
        }
    }

    /// approximate integer convolution
    public func conva(nickname: String? = nil, description: String? = nil, mask: VIPSImage, layers: Int? = nil, cluster: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: mask)
            if let layers = layers {
                opt.set("layers", value: layers)
            }
            if let cluster = cluster {
                opt.set("cluster", value: cluster)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("conva", options: &opt)
        }
    }

    /// float convolution operation
    public func convf(nickname: String? = nil, description: String? = nil, mask: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: mask)
            opt.set("out", value: &out)

            try VIPSImage.call("convf", options: &opt)
        }
    }

    /// int convolution operation
    public func convi(nickname: String? = nil, description: String? = nil, mask: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: mask)
            opt.set("out", value: &out)

            try VIPSImage.call("convi", options: &opt)
        }
    }

    /// separable convolution operation
    public func convsep(nickname: String? = nil, description: String? = nil, mask: VIPSImage, precision: VipsPrecision? = nil, layers: Int? = nil, cluster: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: mask)
            if let precision = precision {
                opt.set("precision", value: precision)
            }
            if let layers = layers {
                opt.set("layers", value: layers)
            }
            if let cluster = cluster {
                opt.set("cluster", value: cluster)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("convsep", options: &opt)
        }
    }

    /// approximate separable integer convolution
    public func convasep(nickname: String? = nil, description: String? = nil, mask: VIPSImage, layers: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: mask)
            if let layers = layers {
                opt.set("layers", value: layers)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("convasep", options: &opt)
        }
    }

    /// unsharp masking for print
    public func sharpen(nickname: String? = nil, description: String? = nil, sigma: Double? = nil, x1: Double? = nil, y2: Double? = nil, y3: Double? = nil, m1: Double? = nil, m2: Double? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let sigma = sigma {
                opt.set("sigma", value: sigma)
            }
            if let x1 = x1 {
                opt.set("x1", value: x1)
            }
            if let y2 = y2 {
                opt.set("y2", value: y2)
            }
            if let y3 = y3 {
                opt.set("y3", value: y3)
            }
            if let m1 = m1 {
                opt.set("m1", value: m1)
            }
            if let m2 = m2 {
                opt.set("m2", value: m2)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("sharpen", options: &opt)
        }
    }

    /// gaussian blur
    public func gaussblur(nickname: String? = nil, description: String? = nil, min-ampl: Double? = nil, sigma: Double, precision: VipsPrecision? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let min-ampl = min-ampl {
                opt.set("min-ampl", value: min-ampl)
            }
            opt.set("sigma", value: sigma)
            if let precision = precision {
                opt.set("precision", value: precision)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("gaussblur", options: &opt)
        }
    }

    /// Sobel edge detector
    public func sobel(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("sobel", options: &opt)
        }
    }

}

//
//  foreign_gif.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Load gif with libnsgif
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - n: Number of pages to load, -1 for all
    ///   - page: First page to load
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func gifload(filename: String, n: Int = 0, page: Int = 0, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if n != 0 {
                opt.set("n", value: n)
            }
            if page != 0 {
                opt.set("page", value: page)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("gifload", options: &opt)
        }
    }

    /// Load gif with libnsgif
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - n: Number of pages to load, -1 for all
    ///   - page: First page to load
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func gifloadBuffer(buffer: Data, n: Int = 0, page: Int = 0, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("buffer", value: buffer)
            if n != 0 {
                opt.set("n", value: n)
            }
            if page != 0 {
                opt.set("page", value: page)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("gifload_buffer", options: &opt)
        }
    }

    /// Load gif from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - n: Number of pages to load, -1 for all
    ///   - page: First page to load
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func gifloadSource(source: VIPSSource, n: Int = 0, page: Int = 0, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if n != 0 {
                opt.set("n", value: n)
            }
            if page != 0 {
                opt.set("page", value: page)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("gifload_source", options: &opt)
        }
    }

    /// Save as gif
    ///
    /// - Parameters:
    ///   - filename: Filename to save to
    ///   - dither: Amount of dithering
    ///   - effort: Quantisation effort
    ///   - bitdepth: Number of bits per pixel
    ///   - interframeMaxerror: Maximum inter-frame error for transparency
    ///   - reuse: Reuse palette from input
    ///   - interpaletteMaxerror: Maximum inter-palette error for palette reusage
    ///   - interlace: Generate an interlaced (progressive) GIF
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func gifsave(filename: String, dither: Double = 0.0, effort: Int = 0, bitdepth: Int = 0, interframeMaxerror: Double = 0.0, reuse: Bool = false, interpaletteMaxerror: Double = 0.0, interlace: Bool = false, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("filename", value: filename)
            if dither != 0.0 {
                opt.set("dither", value: dither)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if interframeMaxerror != 0.0 {
                opt.set("interframe_maxerror", value: interframeMaxerror)
            }
            if reuse != false {
                opt.set("reuse", value: reuse)
            }
            if interpaletteMaxerror != 0.0 {
                opt.set("interpalette_maxerror", value: interpaletteMaxerror)
            }
            if interlace != false {
                opt.set("interlace", value: interlace)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("gifsave", options: &opt)
    }

    /// Save as gif
    ///
    /// - Parameters:
    ///   - dither: Amount of dithering
    ///   - effort: Quantisation effort
    ///   - bitdepth: Number of bits per pixel
    ///   - interframeMaxerror: Maximum inter-frame error for transparency
    ///   - reuse: Reuse palette from input
    ///   - interpaletteMaxerror: Maximum inter-palette error for palette reusage
    ///   - interlace: Generate an interlaced (progressive) GIF
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func gifsaveBuffer(dither: Double = 0.0, effort: Int = 0, bitdepth: Int = 0, interframeMaxerror: Double = 0.0, reuse: Bool = false, interpaletteMaxerror: Double = 0.0, interlace: Bool = false, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws -> Data {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if dither != 0.0 {
                opt.set("dither", value: dither)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if interframeMaxerror != 0.0 {
                opt.set("interframe_maxerror", value: interframeMaxerror)
            }
            if reuse != false {
                opt.set("reuse", value: reuse)
            }
            if interpaletteMaxerror != 0.0 {
                opt.set("interpalette_maxerror", value: interpaletteMaxerror)
            }
            if interlace != false {
                opt.set("interlace", value: interlace)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("gifsave_buffer", options: &opt)
    }

    /// Save as gif
    ///
    /// - Parameters:
    ///   - target: Target to save to
    ///   - dither: Amount of dithering
    ///   - effort: Quantisation effort
    ///   - bitdepth: Number of bits per pixel
    ///   - interframeMaxerror: Maximum inter-frame error for transparency
    ///   - reuse: Reuse palette from input
    ///   - interpaletteMaxerror: Maximum inter-palette error for palette reusage
    ///   - interlace: Generate an interlaced (progressive) GIF
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func gifsaveTarget(target: VIPSTarget, dither: Double = 0.0, effort: Int = 0, bitdepth: Int = 0, interframeMaxerror: Double = 0.0, reuse: Bool = false, interpaletteMaxerror: Double = 0.0, interlace: Bool = false, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("target", value: target)
            if dither != 0.0 {
                opt.set("dither", value: dither)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if interframeMaxerror != 0.0 {
                opt.set("interframe_maxerror", value: interframeMaxerror)
            }
            if reuse != false {
                opt.set("reuse", value: reuse)
            }
            if interpaletteMaxerror != 0.0 {
                opt.set("interpalette_maxerror", value: interpaletteMaxerror)
            }
            if interlace != false {
                opt.set("interlace", value: interlace)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("gifsave_target", options: &opt)
    }

}

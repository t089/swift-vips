//
//  foreign_gif.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips
import CvipsShim

extension VIPSImage {

    /// Load gif with libnsgif
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - n: Number of pages to load, -1 for all
    ///   - page: First page to load
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func gifload(
        filename: String,
        n: Int? = nil,
        page: Int? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if let n = n {
                opt.set("n", value: n)
            }
            if let page = page {
                opt.set("page", value: page)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("gifload", options: &opt)
        }
    }

    /// Load gif with libnsgif
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - n: Number of pages to load, -1 for all
    ///   - page: First page to load
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    @inlinable
    public static func gifload(
        buffer: VIPSBlob,
        n: Int? = nil,
        page: Int? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        // the operation will retain the blob
        try buffer.withVipsBlob { blob in
            try VIPSImage(nil) { out in
                var opt = VIPSOption()

                opt.set("buffer", value: blob)
                if let n = n {
                    opt.set("n", value: n)
                }
                if let page = page {
                    opt.set("page", value: page)
                }
                if let memory = memory {
                    opt.set("memory", value: memory)
                }
                if let access = access {
                    opt.set("access", value: access)
                }
                if let failOn = failOn {
                    opt.set("fail_on", value: failOn)
                }
                if let revalidate = revalidate {
                    opt.set("revalidate", value: revalidate)
                }
                opt.set("out", value: &out)

                try VIPSImage.call("gifload_buffer", options: &opt)
            }
        }
    }

    /// Load gif with libnsgif without copying the data. The caller must ensure the buffer remains valid for
    /// the lifetime of the returned image and all its descendants.
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - n: Number of pages to load, -1 for all
    ///   - page: First page to load
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    @inlinable
    public static func gifload(
        unsafeBuffer buffer: UnsafeRawBufferPointer,
        n: Int? = nil,
        page: Int? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        let blob = VIPSBlob(noCopy: buffer)
        return try gifload(
            buffer: blob,
            n: n,
            page: page,
            memory: memory,
            access: access,
            failOn: failOn,
            revalidate: revalidate
        )
    }

    /// Load gif from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - n: Number of pages to load, -1 for all
    ///   - page: First page to load
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func gifload(
        source: VIPSSource,
        n: Int? = nil,
        page: Int? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage([source]) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if let n = n {
                opt.set("n", value: n)
            }
            if let page = page {
                opt.set("page", value: page)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("gifload_source", options: &opt)
        }
    }

    /// Save as gif
    ///
    /// - Parameters:
    ///   - filename: Filename to save to
    ///   - dither: Amount of dithering
    ///   - effort: Quantisation effort
    ///   - bitdepth: Number of bits per pixel
    ///   - interframeMaxerror: Maximum inter-frame error for transparency
    ///   - reuse: Reuse palette from input
    ///   - interpaletteMaxerror: Maximum inter-palette error for palette reusage
    ///   - interlace: Generate an interlaced (progressive) GIF
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func gifsave(
        filename: String,
        dither: Double? = nil,
        effort: Int? = nil,
        bitdepth: Int? = nil,
        interframeMaxerror: Double? = nil,
        reuse: Bool? = nil,
        interpaletteMaxerror: Double? = nil,
        interlace: Bool? = nil,
        keep: VipsForeignKeep? = nil,
        background: [Double]? = nil,
        pageHeight: Int? = nil,
        profile: String? = nil
    ) throws {
        var opt = VIPSOption()

        opt.set("in", value: self)
        opt.set("filename", value: filename)
        if let dither = dither {
            opt.set("dither", value: dither)
        }
        if let effort = effort {
            opt.set("effort", value: effort)
        }
        if let bitdepth = bitdepth {
            opt.set("bitdepth", value: bitdepth)
        }
        if let interframeMaxerror = interframeMaxerror {
            opt.set("interframe_maxerror", value: interframeMaxerror)
        }
        if let reuse = reuse {
            opt.set("reuse", value: reuse)
        }
        if let interpaletteMaxerror = interpaletteMaxerror {
            opt.set("interpalette_maxerror", value: interpaletteMaxerror)
        }
        if let interlace = interlace {
            opt.set("interlace", value: interlace)
        }
        if let keep = keep {
            opt.set("keep", value: keep)
        }
        if let background = background {
            opt.set("background", value: background)
        }
        if let pageHeight = pageHeight {
            opt.set("page_height", value: pageHeight)
        }
        if let profile = profile {
            opt.set("profile", value: profile)
        }

        try VIPSImage.call("gifsave", options: &opt)
    }

    /// Save as gif
    ///
    /// - Parameters:
    ///   - dither: Amount of dithering
    ///   - effort: Quantisation effort
    ///   - bitdepth: Number of bits per pixel
    ///   - interframeMaxerror: Maximum inter-frame error for transparency
    ///   - reuse: Reuse palette from input
    ///   - interpaletteMaxerror: Maximum inter-palette error for palette reusage
    ///   - interlace: Generate an interlaced (progressive) GIF
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func gifsave(
        dither: Double? = nil,
        effort: Int? = nil,
        bitdepth: Int? = nil,
        interframeMaxerror: Double? = nil,
        reuse: Bool? = nil,
        interpaletteMaxerror: Double? = nil,
        interlace: Bool? = nil,
        keep: VipsForeignKeep? = nil,
        background: [Double]? = nil,
        pageHeight: Int? = nil,
        profile: String? = nil
    ) throws -> VIPSBlob {
        var opt = VIPSOption()

        let out: UnsafeMutablePointer<UnsafeMutablePointer<VipsBlob>?> = .allocate(capacity: 1)
        out.initialize(to: nil)
        defer {
            out.deallocate()
        }

        opt.set("in", value: self.image)
        if let dither = dither {
            opt.set("dither", value: dither)
        }
        if let effort = effort {
            opt.set("effort", value: effort)
        }
        if let bitdepth = bitdepth {
            opt.set("bitdepth", value: bitdepth)
        }
        if let interframeMaxerror = interframeMaxerror {
            opt.set("interframe_maxerror", value: interframeMaxerror)
        }
        if let reuse = reuse {
            opt.set("reuse", value: reuse)
        }
        if let interpaletteMaxerror = interpaletteMaxerror {
            opt.set("interpalette_maxerror", value: interpaletteMaxerror)
        }
        if let interlace = interlace {
            opt.set("interlace", value: interlace)
        }
        if let keep = keep {
            opt.set("keep", value: keep)
        }
        if let background = background {
            opt.set("background", value: background)
        }
        if let pageHeight = pageHeight {
            opt.set("page_height", value: pageHeight)
        }
        if let profile = profile {
            opt.set("profile", value: profile)
        }
        opt.set("buffer", value: out)

        try VIPSImage.call("gifsave_buffer", options: &opt)

        guard let vipsBlob = out.pointee else {
            throw VIPSError("Failed to get buffer from gifsave_buffer")
        }

        return VIPSBlob(vipsBlob)
    }

    /// Save as gif
    ///
    /// - Parameters:
    ///   - target: Target to save to
    ///   - dither: Amount of dithering
    ///   - effort: Quantisation effort
    ///   - bitdepth: Number of bits per pixel
    ///   - interframeMaxerror: Maximum inter-frame error for transparency
    ///   - reuse: Reuse palette from input
    ///   - interpaletteMaxerror: Maximum inter-palette error for palette reusage
    ///   - interlace: Generate an interlaced (progressive) GIF
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func gifsave(
        target: VIPSTarget,
        dither: Double? = nil,
        effort: Int? = nil,
        bitdepth: Int? = nil,
        interframeMaxerror: Double? = nil,
        reuse: Bool? = nil,
        interpaletteMaxerror: Double? = nil,
        interlace: Bool? = nil,
        keep: VipsForeignKeep? = nil,
        background: [Double]? = nil,
        pageHeight: Int? = nil,
        profile: String? = nil
    ) throws {
        var opt = VIPSOption()

        opt.set("in", value: self)
        opt.set("target", value: target)
        if let dither = dither {
            opt.set("dither", value: dither)
        }
        if let effort = effort {
            opt.set("effort", value: effort)
        }
        if let bitdepth = bitdepth {
            opt.set("bitdepth", value: bitdepth)
        }
        if let interframeMaxerror = interframeMaxerror {
            opt.set("interframe_maxerror", value: interframeMaxerror)
        }
        if let reuse = reuse {
            opt.set("reuse", value: reuse)
        }
        if let interpaletteMaxerror = interpaletteMaxerror {
            opt.set("interpalette_maxerror", value: interpaletteMaxerror)
        }
        if let interlace = interlace {
            opt.set("interlace", value: interlace)
        }
        if let keep = keep {
            opt.set("keep", value: keep)
        }
        if let background = background {
            opt.set("background", value: background)
        }
        if let pageHeight = pageHeight {
            opt.set("page_height", value: pageHeight)
        }
        if let profile = profile {
            opt.set("profile", value: profile)
        }

        try VIPSImage.call("gifsave_target", options: &opt)
    }

}

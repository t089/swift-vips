//
//  foreign_heif.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Load a heif image
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - thumbnail: Fetch thumbnail image
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func heifload(filename: String, page: Int = 0, n: Int = 0, thumbnail: Bool = false, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if page != 0 {
                opt.set("page", value: page)
            }
            if n != 0 {
                opt.set("n", value: n)
            }
            if thumbnail != false {
                opt.set("thumbnail", value: thumbnail)
            }
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("heifload", options: &opt)
        }
    }

    /// Load a heif image
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - thumbnail: Fetch thumbnail image
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func heifloadBuffer(buffer: Data, page: Int = 0, n: Int = 0, thumbnail: Bool = false, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("buffer", value: buffer)
            if page != 0 {
                opt.set("page", value: page)
            }
            if n != 0 {
                opt.set("n", value: n)
            }
            if thumbnail != false {
                opt.set("thumbnail", value: thumbnail)
            }
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("heifload_buffer", options: &opt)
        }
    }

    /// Load a heif image
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - thumbnail: Fetch thumbnail image
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func heifloadSource(source: VIPSSource, page: Int = 0, n: Int = 0, thumbnail: Bool = false, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if page != 0 {
                opt.set("page", value: page)
            }
            if n != 0 {
                opt.set("n", value: n)
            }
            if thumbnail != false {
                opt.set("thumbnail", value: thumbnail)
            }
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("heifload_source", options: &opt)
        }
    }

    /// Save image in heif format
    ///
    /// - Parameters:
    ///   - filename: Filename to save to
    ///   - Q: Q factor
    ///   - bitdepth: Number of bits per pixel
    ///   - lossless: Enable lossless compression
    ///   - compression: Compression format
    ///   - effort: CPU effort
    ///   - subsampleMode: Select chroma subsample operation mode
    ///   - encoder: Select encoder to use
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func heifsave(filename: String, Q: Int = 0, bitdepth: Int = 0, lossless: Bool = false, compression: VipsForeignHeifCompression? = nil, effort: Int = 0, subsampleMode: VipsForeignSubsample? = nil, encoder: VipsForeignHeifEncoder? = nil, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("filename", value: filename)
            if Q != 0 {
                opt.set("Q", value: Q)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if lossless != false {
                opt.set("lossless", value: lossless)
            }
            if let compression = compression {
                opt.set("compression", value: compression)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if let subsampleMode = subsampleMode {
                opt.set("subsample_mode", value: subsampleMode)
            }
            if let encoder = encoder {
                opt.set("encoder", value: encoder)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("heifsave", options: &opt)
    }

    /// Save image in heif format
    ///
    /// - Parameters:
    ///   - Q: Q factor
    ///   - bitdepth: Number of bits per pixel
    ///   - lossless: Enable lossless compression
    ///   - compression: Compression format
    ///   - effort: CPU effort
    ///   - subsampleMode: Select chroma subsample operation mode
    ///   - encoder: Select encoder to use
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func heifsaveBuffer(Q: Int = 0, bitdepth: Int = 0, lossless: Bool = false, compression: VipsForeignHeifCompression? = nil, effort: Int = 0, subsampleMode: VipsForeignSubsample? = nil, encoder: VipsForeignHeifEncoder? = nil, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws -> Data {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if Q != 0 {
                opt.set("Q", value: Q)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if lossless != false {
                opt.set("lossless", value: lossless)
            }
            if let compression = compression {
                opt.set("compression", value: compression)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if let subsampleMode = subsampleMode {
                opt.set("subsample_mode", value: subsampleMode)
            }
            if let encoder = encoder {
                opt.set("encoder", value: encoder)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("heifsave_buffer", options: &opt)
    }

    /// Save image in heif format
    ///
    /// - Parameters:
    ///   - target: Target to save to
    ///   - Q: Q factor
    ///   - bitdepth: Number of bits per pixel
    ///   - lossless: Enable lossless compression
    ///   - compression: Compression format
    ///   - effort: CPU effort
    ///   - subsampleMode: Select chroma subsample operation mode
    ///   - encoder: Select encoder to use
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func heifsaveTarget(target: VIPSTarget, Q: Int = 0, bitdepth: Int = 0, lossless: Bool = false, compression: VipsForeignHeifCompression? = nil, effort: Int = 0, subsampleMode: VipsForeignSubsample? = nil, encoder: VipsForeignHeifEncoder? = nil, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("target", value: target)
            if Q != 0 {
                opt.set("Q", value: Q)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if lossless != false {
                opt.set("lossless", value: lossless)
            }
            if let compression = compression {
                opt.set("compression", value: compression)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if let subsampleMode = subsampleMode {
                opt.set("subsample_mode", value: subsampleMode)
            }
            if let encoder = encoder {
                opt.set("encoder", value: encoder)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("heifsave_target", options: &opt)
    }

}

//
//  foreign_heif.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips
import CvipsShim

extension VIPSImage {

    /// Load a heif image
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - thumbnail: Fetch thumbnail image
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func heifload(
        filename: String,
        page: Int? = nil,
        n: Int? = nil,
        thumbnail: Bool? = nil,
        unlimited: Bool? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if let page = page {
                opt.set("page", value: page)
            }
            if let n = n {
                opt.set("n", value: n)
            }
            if let thumbnail = thumbnail {
                opt.set("thumbnail", value: thumbnail)
            }
            if let unlimited = unlimited {
                opt.set("unlimited", value: unlimited)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("heifload", options: &opt)
        }
    }

    /// Load a heif image
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - thumbnail: Fetch thumbnail image
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    @inlinable
    public static func heifload(
        buffer: some Collection<UInt8>,
        page: Int? = nil,
        n: Int? = nil,
        thumbnail: Bool? = nil,
        unlimited: Bool? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        let maybeImage = try buffer.withContiguousStorageIfAvailable { buffer in
            return try VIPSImage(nil) { out in
                var opt = VIPSOption()

                let blob = vips_blob_new(nil, buffer.baseAddress, buffer.count)
                defer { vips_area_unref(shim_vips_area(blob)) }

                opt.set("buffer", value: blob)
                if let page = page {
                    opt.set("page", value: page)
                }
                if let n = n {
                    opt.set("n", value: n)
                }
                if let thumbnail = thumbnail {
                    opt.set("thumbnail", value: thumbnail)
                }
                if let unlimited = unlimited {
                    opt.set("unlimited", value: unlimited)
                }
                if let memory = memory {
                    opt.set("memory", value: memory)
                }
                if let access = access {
                    opt.set("access", value: access)
                }
                if let failOn = failOn {
                    opt.set("fail_on", value: failOn)
                }
                if let revalidate = revalidate {
                    opt.set("revalidate", value: revalidate)
                }
                opt.set("out", value: &out)

                try VIPSImage.call("heifload_buffer", options: &opt)
            }
        }
        if let maybeImage {
            return maybeImage
        } else {
            return try heifload(
                buffer: Array(buffer),
                page: page,
                n: n,
                thumbnail: thumbnail,
                unlimited: unlimited,
                memory: memory,
                access: access,
                failOn: failOn,
                revalidate: revalidate
            )
        }
    }

    /// Load a heif image
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - thumbnail: Fetch thumbnail image
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func heifload(
        source: VIPSSource,
        page: Int? = nil,
        n: Int? = nil,
        thumbnail: Bool? = nil,
        unlimited: Bool? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage([source]) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if let page = page {
                opt.set("page", value: page)
            }
            if let n = n {
                opt.set("n", value: n)
            }
            if let thumbnail = thumbnail {
                opt.set("thumbnail", value: thumbnail)
            }
            if let unlimited = unlimited {
                opt.set("unlimited", value: unlimited)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("heifload_source", options: &opt)
        }
    }

    /// Save image in heif format
    ///
    /// - Parameters:
    ///   - filename: Filename to save to
    ///   - Q: Q factor
    ///   - bitdepth: Number of bits per pixel
    ///   - lossless: Enable lossless compression
    ///   - compression: Compression format
    ///   - effort: CPU effort
    ///   - subsampleMode: Select chroma subsample operation mode
    ///   - encoder: Select encoder to use
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func heifsave(
        filename: String,
        Q: Int? = nil,
        bitdepth: Int? = nil,
        lossless: Bool? = nil,
        compression: VipsForeignHeifCompression? = nil,
        effort: Int? = nil,
        subsampleMode: VipsForeignSubsample? = nil,
        encoder: VipsForeignHeifEncoder? = nil,
        keep: VipsForeignKeep? = nil,
        background: [Double]? = nil,
        pageHeight: Int? = nil,
        profile: String? = nil
    ) throws {
        var opt = VIPSOption()

        opt.set("in", value: self)
        opt.set("filename", value: filename)
        if let Q = Q {
            opt.set("Q", value: Q)
        }
        if let bitdepth = bitdepth {
            opt.set("bitdepth", value: bitdepth)
        }
        if let lossless = lossless {
            opt.set("lossless", value: lossless)
        }
        if let compression = compression {
            opt.set("compression", value: compression)
        }
        if let effort = effort {
            opt.set("effort", value: effort)
        }
        if let subsampleMode = subsampleMode {
            opt.set("subsample_mode", value: subsampleMode)
        }
        if let encoder = encoder {
            opt.set("encoder", value: encoder)
        }
        if let keep = keep {
            opt.set("keep", value: keep)
        }
        if let background = background {
            opt.set("background", value: background)
        }
        if let pageHeight = pageHeight {
            opt.set("page_height", value: pageHeight)
        }
        if let profile = profile {
            opt.set("profile", value: profile)
        }

        try VIPSImage.call("heifsave", options: &opt)
    }

    /// Save image in heif format
    ///
    /// - Parameters:
    ///   - Q: Q factor
    ///   - bitdepth: Number of bits per pixel
    ///   - lossless: Enable lossless compression
    ///   - compression: Compression format
    ///   - effort: CPU effort
    ///   - subsampleMode: Select chroma subsample operation mode
    ///   - encoder: Select encoder to use
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func heifsave(
        Q: Int? = nil,
        bitdepth: Int? = nil,
        lossless: Bool? = nil,
        compression: VipsForeignHeifCompression? = nil,
        effort: Int? = nil,
        subsampleMode: VipsForeignSubsample? = nil,
        encoder: VipsForeignHeifEncoder? = nil,
        keep: VipsForeignKeep? = nil,
        background: [Double]? = nil,
        pageHeight: Int? = nil,
        profile: String? = nil
    ) throws -> VIPSBlob {
        var opt = VIPSOption()

        var out: UnsafeMutablePointer<VipsBlob>! = nil

        opt.set("in", value: self.image)
        if let Q = Q {
            opt.set("Q", value: Q)
        }
        if let bitdepth = bitdepth {
            opt.set("bitdepth", value: bitdepth)
        }
        if let lossless = lossless {
            opt.set("lossless", value: lossless)
        }
        if let compression = compression {
            opt.set("compression", value: compression)
        }
        if let effort = effort {
            opt.set("effort", value: effort)
        }
        if let subsampleMode = subsampleMode {
            opt.set("subsample_mode", value: subsampleMode)
        }
        if let encoder = encoder {
            opt.set("encoder", value: encoder)
        }
        if let keep = keep {
            opt.set("keep", value: keep)
        }
        if let background = background {
            opt.set("background", value: background)
        }
        if let pageHeight = pageHeight {
            opt.set("page_height", value: pageHeight)
        }
        if let profile = profile {
            opt.set("profile", value: profile)
        }
        opt.set("buffer", value: &out)

        try VIPSImage.call("heifsave_buffer", options: &opt)

        guard let vipsBlob = out else {
            throw VIPSError("Failed to get buffer from heifsave_buffer")
        }

        return VIPSBlob(vipsBlob)
    }

    /// Save image in heif format
    ///
    /// - Parameters:
    ///   - target: Target to save to
    ///   - Q: Q factor
    ///   - bitdepth: Number of bits per pixel
    ///   - lossless: Enable lossless compression
    ///   - compression: Compression format
    ///   - effort: CPU effort
    ///   - subsampleMode: Select chroma subsample operation mode
    ///   - encoder: Select encoder to use
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func heifsave(
        target: VIPSTarget,
        Q: Int? = nil,
        bitdepth: Int? = nil,
        lossless: Bool? = nil,
        compression: VipsForeignHeifCompression? = nil,
        effort: Int? = nil,
        subsampleMode: VipsForeignSubsample? = nil,
        encoder: VipsForeignHeifEncoder? = nil,
        keep: VipsForeignKeep? = nil,
        background: [Double]? = nil,
        pageHeight: Int? = nil,
        profile: String? = nil
    ) throws {
        var opt = VIPSOption()

        opt.set("in", value: self)
        opt.set("target", value: target)
        if let Q = Q {
            opt.set("Q", value: Q)
        }
        if let bitdepth = bitdepth {
            opt.set("bitdepth", value: bitdepth)
        }
        if let lossless = lossless {
            opt.set("lossless", value: lossless)
        }
        if let compression = compression {
            opt.set("compression", value: compression)
        }
        if let effort = effort {
            opt.set("effort", value: effort)
        }
        if let subsampleMode = subsampleMode {
            opt.set("subsample_mode", value: subsampleMode)
        }
        if let encoder = encoder {
            opt.set("encoder", value: encoder)
        }
        if let keep = keep {
            opt.set("keep", value: keep)
        }
        if let background = background {
            opt.set("background", value: background)
        }
        if let pageHeight = pageHeight {
            opt.set("page_height", value: pageHeight)
        }
        if let profile = profile {
            opt.set("profile", value: profile)
        }

        try VIPSImage.call("heifsave_target", options: &opt)
    }

}

//
//  foreign_pdf.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Load pdf from file
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - dpi: DPI to render at
    ///   - scale: Factor to scale by
    ///   - background: Background colour
    ///   - password: Password to decrypt with
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pdfload(filename: String, page: Int = 0, n: Int = 0, dpi: Double = 0.0, scale: Double = 0.0, background: [Double] = [], password: String = "", memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if page != 0 {
                opt.set("page", value: page)
            }
            if n != 0 {
                opt.set("n", value: n)
            }
            if dpi != 0.0 {
                opt.set("dpi", value: dpi)
            }
            if scale != 0.0 {
                opt.set("scale", value: scale)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if password != "" {
                opt.set("password", value: password)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pdfload", options: &opt)
        }
    }

    /// Load pdf from buffer
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - dpi: DPI to render at
    ///   - scale: Factor to scale by
    ///   - background: Background colour
    ///   - password: Password to decrypt with
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pdfloadBuffer(buffer: Data, page: Int = 0, n: Int = 0, dpi: Double = 0.0, scale: Double = 0.0, background: [Double] = [], password: String = "", memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("buffer", value: buffer)
            if page != 0 {
                opt.set("page", value: page)
            }
            if n != 0 {
                opt.set("n", value: n)
            }
            if dpi != 0.0 {
                opt.set("dpi", value: dpi)
            }
            if scale != 0.0 {
                opt.set("scale", value: scale)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if password != "" {
                opt.set("password", value: password)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pdfload_buffer", options: &opt)
        }
    }

    /// Load pdf from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - dpi: DPI to render at
    ///   - scale: Factor to scale by
    ///   - background: Background colour
    ///   - password: Password to decrypt with
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pdfloadSource(source: VIPSSource, page: Int = 0, n: Int = 0, dpi: Double = 0.0, scale: Double = 0.0, background: [Double] = [], password: String = "", memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if page != 0 {
                opt.set("page", value: page)
            }
            if n != 0 {
                opt.set("n", value: n)
            }
            if dpi != 0.0 {
                opt.set("dpi", value: dpi)
            }
            if scale != 0.0 {
                opt.set("scale", value: scale)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if password != "" {
                opt.set("password", value: password)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pdfload_source", options: &opt)
        }
    }

}

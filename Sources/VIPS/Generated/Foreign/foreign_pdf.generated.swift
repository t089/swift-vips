//
//  foreign_pdf.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips
import CvipsShim

extension VIPSImage {

    /// Load pdf from file
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - dpi: DPI to render at
    ///   - scale: Factor to scale by
    ///   - background: Background colour
    ///   - password: Password to decrypt with
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pdfload(
        filename: String,
        page: Int? = nil,
        n: Int? = nil,
        dpi: Double? = nil,
        scale: Double? = nil,
        background: [Double]? = nil,
        password: String? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if let page = page {
                opt.set("page", value: page)
            }
            if let n = n {
                opt.set("n", value: n)
            }
            if let dpi = dpi {
                opt.set("dpi", value: dpi)
            }
            if let scale = scale {
                opt.set("scale", value: scale)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let password = password {
                opt.set("password", value: password)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pdfload", options: &opt)
        }
    }

    /// Load pdf from buffer
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - dpi: DPI to render at
    ///   - scale: Factor to scale by
    ///   - background: Background colour
    ///   - password: Password to decrypt with
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    @inlinable
    public static func pdfload(
        buffer: VIPSBlob,
        page: Int? = nil,
        n: Int? = nil,
        dpi: Double? = nil,
        scale: Double? = nil,
        background: [Double]? = nil,
        password: String? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        // the operation will retain the blob
        try buffer.withVipsBlob { blob in
            try VIPSImage(nil) { out in
                var opt = VIPSOption()

                opt.set("buffer", value: blob)
                if let page = page {
                    opt.set("page", value: page)
                }
                if let n = n {
                    opt.set("n", value: n)
                }
                if let dpi = dpi {
                    opt.set("dpi", value: dpi)
                }
                if let scale = scale {
                    opt.set("scale", value: scale)
                }
                if let background = background {
                    opt.set("background", value: background)
                }
                if let password = password {
                    opt.set("password", value: password)
                }
                if let memory = memory {
                    opt.set("memory", value: memory)
                }
                if let access = access {
                    opt.set("access", value: access)
                }
                if let failOn = failOn {
                    opt.set("fail_on", value: failOn)
                }
                if let revalidate = revalidate {
                    opt.set("revalidate", value: revalidate)
                }
                opt.set("out", value: &out)

                try VIPSImage.call("pdfload_buffer", options: &opt)
            }
        }
    }

    /// Load pdf from buffer without copying the data. The caller must ensure the buffer remains valid for
    /// the lifetime of the returned image and all its descendants.
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - dpi: DPI to render at
    ///   - scale: Factor to scale by
    ///   - background: Background colour
    ///   - password: Password to decrypt with
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    @inlinable
    public static func pdfload(
        unsafeBuffer buffer: UnsafeRawBufferPointer,
        page: Int? = nil,
        n: Int? = nil,
        dpi: Double? = nil,
        scale: Double? = nil,
        background: [Double]? = nil,
        password: String? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        let blob = VIPSBlob(noCopy: buffer)
        return try pdfload(
            buffer: blob,
            page: page,
            n: n,
            dpi: dpi,
            scale: scale,
            background: background,
            password: password,
            memory: memory,
            access: access,
            failOn: failOn,
            revalidate: revalidate
        )
    }

    /// Load pdf from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - page: First page to load
    ///   - n: Number of pages to load, -1 for all
    ///   - dpi: DPI to render at
    ///   - scale: Factor to scale by
    ///   - background: Background colour
    ///   - password: Password to decrypt with
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pdfload(
        source: VIPSSource,
        page: Int? = nil,
        n: Int? = nil,
        dpi: Double? = nil,
        scale: Double? = nil,
        background: [Double]? = nil,
        password: String? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage([source]) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if let page = page {
                opt.set("page", value: page)
            }
            if let n = n {
                opt.set("n", value: n)
            }
            if let dpi = dpi {
                opt.set("dpi", value: dpi)
            }
            if let scale = scale {
                opt.set("scale", value: scale)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let password = password {
                opt.set("password", value: password)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pdfload_source", options: &opt)
        }
    }

}

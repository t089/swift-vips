//
//  foreign_png.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Load png from file
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pngload(filename: String, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pngload", options: &opt)
        }
    }

    /// Load png from buffer
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pngloadBuffer(buffer: Data, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("buffer", value: buffer)
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pngload_buffer", options: &opt)
        }
    }

    /// Load png from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - unlimited: Remove all denial of service limits
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func pngloadSource(source: VIPSSource, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("pngload_source", options: &opt)
        }
    }

    /// Save image to file as png
    ///
    /// - Parameters:
    ///   - filename: Filename to save to
    ///   - compression: Compression factor
    ///   - interlace: Interlace image
    ///   - filter: libspng row filter flag(s)
    ///   - palette: Quantise to 8bpp palette
    ///   - Q: Quantisation quality
    ///   - dither: Amount of dithering
    ///   - bitdepth: Write as a 1, 2, 4, 8 or 16 bit image
    ///   - effort: Quantisation CPU effort
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func pngsave(filename: String, compression: Int = 0, interlace: Bool = false, filter: VipsForeignPngFilter? = nil, palette: Bool = false, Q: Int = 0, dither: Double = 0.0, bitdepth: Int = 0, effort: Int = 0, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("filename", value: filename)
            if compression != 0 {
                opt.set("compression", value: compression)
            }
            if interlace != false {
                opt.set("interlace", value: interlace)
            }
            if let filter = filter {
                opt.set("filter", value: filter)
            }
            if palette != false {
                opt.set("palette", value: palette)
            }
            if Q != 0 {
                opt.set("Q", value: Q)
            }
            if dither != 0.0 {
                opt.set("dither", value: dither)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("pngsave", options: &opt)
    }

    /// Save image to buffer as png
    ///
    /// - Parameters:
    ///   - compression: Compression factor
    ///   - interlace: Interlace image
    ///   - filter: libspng row filter flag(s)
    ///   - palette: Quantise to 8bpp palette
    ///   - Q: Quantisation quality
    ///   - dither: Amount of dithering
    ///   - bitdepth: Write as a 1, 2, 4, 8 or 16 bit image
    ///   - effort: Quantisation CPU effort
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func pngsaveBuffer(compression: Int = 0, interlace: Bool = false, filter: VipsForeignPngFilter? = nil, palette: Bool = false, Q: Int = 0, dither: Double = 0.0, bitdepth: Int = 0, effort: Int = 0, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws -> Data {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if compression != 0 {
                opt.set("compression", value: compression)
            }
            if interlace != false {
                opt.set("interlace", value: interlace)
            }
            if let filter = filter {
                opt.set("filter", value: filter)
            }
            if palette != false {
                opt.set("palette", value: palette)
            }
            if Q != 0 {
                opt.set("Q", value: Q)
            }
            if dither != 0.0 {
                opt.set("dither", value: dither)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("pngsave_buffer", options: &opt)
    }

    /// Save image to target as png
    ///
    /// - Parameters:
    ///   - target: Target to save to
    ///   - compression: Compression factor
    ///   - interlace: Interlace image
    ///   - filter: libspng row filter flag(s)
    ///   - palette: Quantise to 8bpp palette
    ///   - Q: Quantisation quality
    ///   - dither: Amount of dithering
    ///   - bitdepth: Write as a 1, 2, 4, 8 or 16 bit image
    ///   - effort: Quantisation CPU effort
    ///   - keep: Which metadata to retain
    ///   - background: Background value
    ///   - pageHeight: Set page height for multipage save
    ///   - profile: Filename of ICC profile to embed
    public func pngsaveTarget(target: VIPSTarget, compression: Int = 0, interlace: Bool = false, filter: VipsForeignPngFilter? = nil, palette: Bool = false, Q: Int = 0, dither: Double = 0.0, bitdepth: Int = 0, effort: Int = 0, keep: VipsForeignKeep? = nil, background: [Double] = [], pageHeight: Int = 0, profile: String = "") throws {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("target", value: target)
            if compression != 0 {
                opt.set("compression", value: compression)
            }
            if interlace != false {
                opt.set("interlace", value: interlace)
            }
            if let filter = filter {
                opt.set("filter", value: filter)
            }
            if palette != false {
                opt.set("palette", value: palette)
            }
            if Q != 0 {
                opt.set("Q", value: Q)
            }
            if dither != 0.0 {
                opt.set("dither", value: dither)
            }
            if bitdepth != 0 {
                opt.set("bitdepth", value: bitdepth)
            }
            if effort != 0 {
                opt.set("effort", value: effort)
            }
            if let keep = keep {
                opt.set("keep", value: keep)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if pageHeight != 0 {
                opt.set("page_height", value: pageHeight)
            }
            if profile != "" {
                opt.set("profile", value: profile)
            }

            try VIPSImage.call("pngsave_target", options: &opt)
    }

}

//
//  foreign_svg.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Load svg with rsvg
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - dpi: Render at this DPI
    ///   - scale: Scale output by this factor
    ///   - unlimited: Allow SVG of any size
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func svgload(filename: String, dpi: Double = 0.0, scale: Double = 0.0, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if dpi != 0.0 {
                opt.set("dpi", value: dpi)
            }
            if scale != 0.0 {
                opt.set("scale", value: scale)
            }
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("svgload", options: &opt)
        }
    }

    /// Load svg with rsvg
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - dpi: Render at this DPI
    ///   - scale: Scale output by this factor
    ///   - unlimited: Allow SVG of any size
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func svgloadBuffer(buffer: Data, dpi: Double = 0.0, scale: Double = 0.0, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("buffer", value: buffer)
            if dpi != 0.0 {
                opt.set("dpi", value: dpi)
            }
            if scale != 0.0 {
                opt.set("scale", value: scale)
            }
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("svgload_buffer", options: &opt)
        }
    }

    /// Load svg from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - dpi: Render at this DPI
    ///   - scale: Scale output by this factor
    ///   - unlimited: Allow SVG of any size
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func svgloadSource(source: VIPSSource, dpi: Double = 0.0, scale: Double = 0.0, unlimited: Bool = false, memory: Bool = false, access: VipsAccess? = nil, failOn: VipsFailOn? = nil, revalidate: Bool = false) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if dpi != 0.0 {
                opt.set("dpi", value: dpi)
            }
            if scale != 0.0 {
                opt.set("scale", value: scale)
            }
            if unlimited != false {
                opt.set("unlimited", value: unlimited)
            }
            if memory != false {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if revalidate != false {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("svgload_source", options: &opt)
        }
    }

}

//
//  foreign_svg.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips
import CvipsShim

extension VIPSImage {

    /// Load svg with rsvg
    ///
    /// - Parameters:
    ///   - filename: Filename to load from
    ///   - dpi: Render at this DPI
    ///   - scale: Scale output by this factor
    ///   - unlimited: Allow SVG of any size
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func svgload(
        filename: String,
        dpi: Double? = nil,
        scale: Double? = nil,
        unlimited: Bool? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if let dpi = dpi {
                opt.set("dpi", value: dpi)
            }
            if let scale = scale {
                opt.set("scale", value: scale)
            }
            if let unlimited = unlimited {
                opt.set("unlimited", value: unlimited)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("svgload", options: &opt)
        }
    }

    /// Load svg with rsvg
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - dpi: Render at this DPI
    ///   - scale: Scale output by this factor
    ///   - unlimited: Allow SVG of any size
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    @inlinable
    public static func svgload(
        buffer: some Collection<UInt8>,
        dpi: Double? = nil,
        scale: Double? = nil,
        unlimited: Bool? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        let maybeImage = try buffer.withContiguousStorageIfAvailable { buffer in
            return try VIPSImage(nil) { out in
                var opt = VIPSOption()

                let blob = vips_blob_new(nil, buffer.baseAddress, buffer.count)
                defer { vips_area_unref(shim_vips_area(blob)) }

                opt.set("buffer", value: blob)
                if let dpi = dpi {
                    opt.set("dpi", value: dpi)
                }
                if let scale = scale {
                    opt.set("scale", value: scale)
                }
                if let unlimited = unlimited {
                    opt.set("unlimited", value: unlimited)
                }
                if let memory = memory {
                    opt.set("memory", value: memory)
                }
                if let access = access {
                    opt.set("access", value: access)
                }
                if let failOn = failOn {
                    opt.set("fail_on", value: failOn)
                }
                if let revalidate = revalidate {
                    opt.set("revalidate", value: revalidate)
                }
                opt.set("out", value: &out)

                try VIPSImage.call("svgload_buffer", options: &opt)
            }
        }
        if let maybeImage {
            return maybeImage
        } else {
            return try svgload(
                buffer: Array(buffer),
                dpi: dpi,
                scale: scale,
                unlimited: unlimited,
                memory: memory,
                access: access,
                failOn: failOn,
                revalidate: revalidate
            )
        }
    }

    /// Load svg from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - dpi: Render at this DPI
    ///   - scale: Scale output by this factor
    ///   - unlimited: Allow SVG of any size
    ///   - memory: Force open via memory
    ///   - access: Required access pattern for this file
    ///   - failOn: Error level to fail on
    ///   - revalidate: Don't use a cached result for this operation
    public static func svgload(
        source: VIPSSource,
        dpi: Double? = nil,
        scale: Double? = nil,
        unlimited: Bool? = nil,
        memory: Bool? = nil,
        access: VipsAccess? = nil,
        failOn: VipsFailOn? = nil,
        revalidate: Bool? = nil
    ) throws -> VIPSImage {
        return try VIPSImage([source]) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if let dpi = dpi {
                opt.set("dpi", value: dpi)
            }
            if let scale = scale {
                opt.set("scale", value: scale)
            }
            if let unlimited = unlimited {
                opt.set("unlimited", value: unlimited)
            }
            if let memory = memory {
                opt.set("memory", value: memory)
            }
            if let access = access {
                opt.set("access", value: access)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            if let revalidate = revalidate {
                opt.set("revalidate", value: revalidate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("svgload_source", options: &opt)
        }
    }

}

//
//  Histogram.generated.swift
//
//  Generated by VIPS Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// find image histogram
    public func histFind(nickname: String? = nil, description: String? = nil, band: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let band = band {
                opt.set("band", value: band)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_find", options: &opt)
        }
    }

    /// find n-dimensional image histogram
    public func histFindNdim(nickname: String? = nil, description: String? = nil, bins: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let bins = bins {
                opt.set("bins", value: bins)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_find_ndim", options: &opt)
        }
    }

    /// find indexed image histogram
    public func histFindIndexed(nickname: String? = nil, description: String? = nil, index: VIPSImage, combine: VipsCombine? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("index", value: index)
            if let combine = combine {
                opt.set("combine", value: combine)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_find_indexed", options: &opt)
        }
    }

    /// match two histograms
    public func histMatch(nickname: String? = nil, ref: VIPSImage, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("ref", value: ref)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_match", options: &opt)
        }
    }

    /// normalise histogram
    public func histNorm(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_norm", options: &opt)
        }
    }

    /// histogram equalisation
    public func histEqual(nickname: String? = nil, description: String? = nil, band: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let band = band {
                opt.set("band", value: band)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_equal", options: &opt)
        }
    }

    /// plot histogram
    public func histPlot(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_plot", options: &opt)
        }
    }

    /// local histogram equalisation
    public func histLocal(nickname: String? = nil, description: String? = nil, width: Int, height: Int, max-slope: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            opt.set("height", value: height)
            if let max-slope = max-slope {
                opt.set("max-slope", value: max-slope)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_local", options: &opt)
        }
    }

    /// test for monotonicity
    public func histIsmonotonic(nickname: String? = nil, description: String? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }

            try VIPSImage.call("hist_ismonotonic", options: &opt)
        }
    }

    /// estimate image entropy
    public func histEntropy(nickname: String? = nil, description: String? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }

            try VIPSImage.call("hist_entropy", options: &opt)
        }
    }

}

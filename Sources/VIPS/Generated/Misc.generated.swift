//
//  Misc.generated.swift
//
//  Generated by VIPS Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// run an external command
    public func system(nickname: String? = nil, out-format: String? = nil, in-format: String? = nil, cmd-format: String, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let out-format = out-format {
                opt.set("out-format", value: out-format)
            }
            if let in-format = in-format {
                opt.set("in-format", value: in-format)
            }
            opt.set("cmd-format", value: cmd-format)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("system", options: &opt)
        }
    }

    /// find image average
    public func avg(nickname: String? = nil, description: String? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }

            try VIPSImage.call("avg", options: &opt)
        }
    }

    /// find image minimum
    public func min(nickname: String? = nil, description: String? = nil, size: Int? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let size = size {
                opt.set("size", value: size)
            }

            try VIPSImage.call("min", options: &opt)
        }
    }

    /// find image maximum
    public func max(nickname: String? = nil, description: String? = nil, size: Int? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let size = size {
                opt.set("size", value: size)
            }

            try VIPSImage.call("max", options: &opt)
        }
    }

    /// find image standard deviation
    public func deviate(nickname: String? = nil, description: String? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }

            try VIPSImage.call("deviate", options: &opt)
        }
    }

    /// find many image stats
    public func stats(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("stats", options: &opt)
        }
    }

    /// find image projections
    public func project(nickname: String? = nil, description: String? = nil) throws -> (columns: VIPSImage, rows: VIPSImage) {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("columns", value: &out)

            try VIPSImage.call("project", options: &opt)
        }
    }

    /// find image profiles
    public func profile(nickname: String? = nil, description: String? = nil) throws -> (columns: VIPSImage, rows: VIPSImage) {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("columns", value: &out)

            try VIPSImage.call("profile", options: &opt)
        }
    }

    /// measure a set of patches on a color chart
    public func measure(nickname: String? = nil, description: String? = nil, h: Int, v: Int, left: Int? = nil, top: Int? = nil, width: Int? = nil, height: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("h", value: h)
            opt.set("v", value: v)
            if let left = left {
                opt.set("left", value: left)
            }
            if let top = top {
                opt.set("top", value: top)
            }
            if let width = width {
                opt.set("width", value: width)
            }
            if let height = height {
                opt.set("height", value: height)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("measure", options: &opt)
        }
    }

    /// read a point from an image
    public func getpoint(nickname: String? = nil, description: String? = nil, x: Int, y: Int) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("x", value: x)
            opt.set("y", value: y)

            try VIPSImage.call("getpoint", options: &opt)
        }
    }

    /// search an image for non-edge areas
    public func findTrim(nickname: String? = nil, threshold: Double? = nil, description: String? = nil, background: [Double]? = nil, line-art: Bool? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let threshold = threshold {
                opt.set("threshold", value: threshold)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let line-art = line-art {
                opt.set("line-art", value: line-art)
            }

            try VIPSImage.call("find_trim", options: &opt)
        }
    }

    /// copy an image
    public func copy(nickname: String? = nil, description: String? = nil, width: Int? = nil, height: Int? = nil, bands: Int? = nil, format: VipsBandFormat? = nil, coding: VipsCoding? = nil, interpretation: VipsInterpretation? = nil, xres: Double? = nil, yres: Double? = nil, xoffset: Int? = nil, yoffset: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let width = width {
                opt.set("width", value: width)
            }
            if let height = height {
                opt.set("height", value: height)
            }
            if let bands = bands {
                opt.set("bands", value: bands)
            }
            if let format = format {
                opt.set("format", value: format)
            }
            if let coding = coding {
                opt.set("coding", value: coding)
            }
            if let interpretation = interpretation {
                opt.set("interpretation", value: interpretation)
            }
            if let xres = xres {
                opt.set("xres", value: xres)
            }
            if let yres = yres {
                opt.set("yres", value: yres)
            }
            if let xoffset = xoffset {
                opt.set("xoffset", value: xoffset)
            }
            if let yoffset = yoffset {
                opt.set("yoffset", value: yoffset)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("copy", options: &opt)
        }
    }

    /// check sequential access
    public func sequential(nickname: String? = nil, description: String? = nil, tile-height: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let tile-height = tile-height {
                opt.set("tile-height", value: tile-height)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("sequential", options: &opt)
        }
    }

    /// cache an image
    public func cache(nickname: String? = nil, description: String? = nil, max-tiles: Int? = nil, tile-height: Int? = nil, tile-width: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let max-tiles = max-tiles {
                opt.set("max-tiles", value: max-tiles)
            }
            if let tile-height = tile-height {
                opt.set("tile-height", value: tile-height)
            }
            if let tile-width = tile-width {
                opt.set("tile-width", value: tile-width)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("cache", options: &opt)
        }
    }

    /// insert image @sub into @main at @x, @y
    public static func insert(main: VIPSImage, sub: VIPSImage, nickname: String? = nil, description: String? = nil, x: Int, y: Int, expand: Bool? = nil, background: [Double]? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("main", value: main)
            opt.set("sub", value: sub)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("x", value: x)
            opt.set("y", value: y)
            if let expand = expand {
                opt.set("expand", value: expand)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("insert", options: &opt)
        }
    }

    /// join a pair of images
    public static func join(in1: VIPSImage, in2: VIPSImage, nickname: String? = nil, description: String? = nil, direction: VipsDirection, expand: Bool? = nil, shim: Int? = nil, background: [Double]? = nil, align: VipsAlign? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("in1", value: in1)
            opt.set("in2", value: in2)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("direction", value: direction)
            if let expand = expand {
                opt.set("expand", value: expand)
            }
            if let shim = shim {
                opt.set("shim", value: shim)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let align = align {
                opt.set("align", value: align)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("join", options: &opt)
        }
    }

    /// join an array of images
    public func arrayjoin(nickname: String? = nil, description: String? = nil, across: Int? = nil, shim: Int? = nil, background: [Double]? = nil, halign: VipsAlign? = nil, valign: VipsAlign? = nil, hspacing: Int? = nil, vspacing: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let across = across {
                opt.set("across", value: across)
            }
            if let shim = shim {
                opt.set("shim", value: shim)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let halign = halign {
                opt.set("halign", value: halign)
            }
            if let valign = valign {
                opt.set("valign", value: valign)
            }
            if let hspacing = hspacing {
                opt.set("hspacing", value: hspacing)
            }
            if let vspacing = vspacing {
                opt.set("vspacing", value: vspacing)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("arrayjoin", options: &opt)
        }
    }

    /// replicate an image
    public func replicate(nickname: String? = nil, description: String? = nil, across: Int, down: Int) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("across", value: across)
            opt.set("down", value: down)
            opt.set("out", value: &out)

            try VIPSImage.call("replicate", options: &opt)
        }
    }

    /// cast an image
    public func cast(nickname: String? = nil, description: String? = nil, format: VipsBandFormat, shift: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("format", value: format)
            if let shift = shift {
                opt.set("shift", value: shift)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("cast", options: &opt)
        }
    }

    /// rotate an image
    public func rot(nickname: String? = nil, description: String? = nil, angle: VipsAngle) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("angle", value: angle)
            opt.set("out", value: &out)

            try VIPSImage.call("rot", options: &opt)
        }
    }

    /// rotate an image
    public func rot45(nickname: String? = nil, description: String? = nil, angle: VipsAngle45? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let angle = angle {
                opt.set("angle", value: angle)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("rot45", options: &opt)
        }
    }

    /// autorotate image by exif tag
    public func autorot(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("autorot", options: &opt)
        }
    }

    /// ifthenelse an image
    public static func ifthenelse(cond: VIPSImage, in1: VIPSImage, in2: VIPSImage, nickname: String? = nil, description: String? = nil, blend: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("cond", value: cond)
            opt.set("in1", value: in1)
            opt.set("in2", value: in2)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let blend = blend {
                opt.set("blend", value: blend)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("ifthenelse", options: &opt)
        }
    }

    /// linear recombination with matrix
    public func recomb(nickname: String? = nil, description: String? = nil, m: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("m", value: m)
            opt.set("out", value: &out)

            try VIPSImage.call("recomb", options: &opt)
        }
    }

    /// fold up x axis into bands
    public func bandfold(nickname: String? = nil, description: String? = nil, factor: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let factor = factor {
                opt.set("factor", value: factor)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("bandfold", options: &opt)
        }
    }

    /// unfold image bands into x axis
    public func bandunfold(nickname: String? = nil, description: String? = nil, factor: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let factor = factor {
                opt.set("factor", value: factor)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("bandunfold", options: &opt)
        }
    }

    /// flatten alpha out of an image
    public func flatten(nickname: String? = nil, background: [Double]? = nil, description: String? = nil, max-alpha: Double? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let max-alpha = max-alpha {
                opt.set("max-alpha", value: max-alpha)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("flatten", options: &opt)
        }
    }

    /// grid an image
    public func grid(nickname: String? = nil, description: String? = nil, tile-height: Int, across: Int, down: Int) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("tile-height", value: tile-height)
            opt.set("across", value: across)
            opt.set("down", value: down)
            opt.set("out", value: &out)

            try VIPSImage.call("grid", options: &opt)
        }
    }

    /// transpose3d an image
    public func transpose3d(nickname: String? = nil, description: String? = nil, page-height: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let page-height = page-height {
                opt.set("page-height", value: page-height)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("transpose3d", options: &opt)
        }
    }

    /// wrap image origin
    public func wrap(nickname: String? = nil, description: String? = nil, x: Int? = nil, y: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let x = x {
                opt.set("x", value: x)
            }
            if let y = y {
                opt.set("y", value: y)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("wrap", options: &opt)
        }
    }

    /// zoom an image
    public static func zoom(input: VIPSImage, nickname: String? = nil, description: String? = nil, xfac: Int, yfac: Int) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("input", value: input)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("xfac", value: xfac)
            opt.set("yfac", value: yfac)
            opt.set("out", value: &out)

            try VIPSImage.call("zoom", options: &opt)
        }
    }

    /// subsample an image
    public static func subsample(input: VIPSImage, nickname: String? = nil, description: String? = nil, xfac: Int, yfac: Int, point: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("input", value: input)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("xfac", value: xfac)
            opt.set("yfac", value: yfac)
            if let point = point {
                opt.set("point", value: point)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("subsample", options: &opt)
        }
    }

    /// pick most-significant byte from an image
    public func msb(nickname: String? = nil, description: String? = nil, band: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let band = band {
                opt.set("band", value: band)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("msb", options: &opt)
        }
    }

    /// byteswap an image
    public func byteswap(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("byteswap", options: &opt)
        }
    }

    /// gamma an image
    public func gamma(nickname: String? = nil, exponent: Double? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let exponent = exponent {
                opt.set("exponent", value: exponent)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("gamma", options: &opt)
        }
    }

    /// make a Laplacian of Gaussian image
    public static func logmat(nickname: String? = nil, sigma: Double, description: String? = nil, min-ampl: Double, separable: Bool? = nil, precision: VipsPrecision? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("sigma", value: sigma)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("min-ampl", value: min-ampl)
            if let separable = separable {
                opt.set("separable", value: separable)
            }
            if let precision = precision {
                opt.set("precision", value: precision)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("logmat", options: &opt)
        }
    }

    /// build a look-up table
    public func buildlut(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("buildlut", options: &opt)
        }
    }

    /// build an inverted look-up table
    public func invertlut(nickname: String? = nil, description: String? = nil, size: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("invertlut", options: &opt)
        }
    }

    /// build a look-up table
    public static func tonelut(nickname: String? = nil, description: String? = nil, in-max: Int? = nil, out-max: Int? = nil, Lb: Double? = nil, Lw: Double? = nil, Ps: Double? = nil, Pm: Double? = nil, Ph: Double? = nil, S: Double? = nil, M: Double? = nil, H: Double? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let in-max = in-max {
                opt.set("in-max", value: in-max)
            }
            if let out-max = out-max {
                opt.set("out-max", value: out-max)
            }
            if let Lb = Lb {
                opt.set("Lb", value: Lb)
            }
            if let Lw = Lw {
                opt.set("Lw", value: Lw)
            }
            if let Ps = Ps {
                opt.set("Ps", value: Ps)
            }
            if let Pm = Pm {
                opt.set("Pm", value: Pm)
            }
            if let Ph = Ph {
                opt.set("Ph", value: Ph)
            }
            if let S = S {
                opt.set("S", value: S)
            }
            if let M = M {
                opt.set("M", value: M)
            }
            if let H = H {
                opt.set("H", value: H)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("tonelut", options: &opt)
        }
    }

    /// make a 1D image where pixel values are indexes
    public static func identity(nickname: String? = nil, description: String? = nil, bands: Int? = nil, ushort: Bool? = nil, size: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let bands = bands {
                opt.set("bands", value: bands)
            }
            if let ushort = ushort {
                opt.set("ushort", value: ushort)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("identity", options: &opt)
        }
    }

    /// make a fractal surface
    public static func fractsurf(nickname: String? = nil, description: String? = nil, width: Int, height: Int, fractal-dimension: Double) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            opt.set("height", value: height)
            opt.set("fractal-dimension", value: fractal-dimension)
            opt.set("out", value: &out)

            try VIPSImage.call("fractsurf", options: &opt)
        }
    }

    /// make a worley noise image
    public static func worley(nickname: String? = nil, width: Int, description: String? = nil, cell-size: Int? = nil, height: Int, seed: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("width", value: width)
            if let description = description {
                opt.set("description", value: description)
            }
            if let cell-size = cell-size {
                opt.set("cell-size", value: cell-size)
            }
            opt.set("height", value: height)
            if let seed = seed {
                opt.set("seed", value: seed)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("worley", options: &opt)
        }
    }

    /// make a perlin noise image
    public static func perlin(nickname: String? = nil, width: Int, description: String? = nil, cell-size: Int? = nil, height: Int, uchar: Bool? = nil, seed: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("width", value: width)
            if let description = description {
                opt.set("description", value: description)
            }
            if let cell-size = cell-size {
                opt.set("cell-size", value: cell-size)
            }
            opt.set("height", value: height)
            if let uchar = uchar {
                opt.set("uchar", value: uchar)
            }
            if let seed = seed {
                opt.set("seed", value: seed)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("perlin", options: &opt)
        }
    }

    /// find the index of the first non-zero pixel in tests
    public static func switch(tests: [VIPSImage], nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("tests", value: tests)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("switch", options: &opt)
        }
    }

    /// generate thumbnail from file
    public static func thumbnail(filename: String, nickname: String? = nil, description: String? = nil, width: Int, height: Int? = nil, size: VipsSize? = nil, no-rotate: Bool? = nil, crop: VipsInteresting? = nil, linear: Bool? = nil, import-profile: String? = nil, export-profile: String? = nil, intent: VipsIntent? = nil, fail-on: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            if let height = height {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if let no-rotate = no-rotate {
                opt.set("no-rotate", value: no-rotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if let linear = linear {
                opt.set("linear", value: linear)
            }
            if let import-profile = import-profile {
                opt.set("import-profile", value: import-profile)
            }
            if let export-profile = export-profile {
                opt.set("export-profile", value: export-profile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let fail-on = fail-on {
                opt.set("fail-on", value: fail-on)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail", options: &opt)
        }
    }

    /// generate thumbnail from buffer
    public static func thumbnailBuffer(buffer: Data, nickname: String? = nil, description: String? = nil, width: Int, option-string: String? = nil, height: Int? = nil, size: VipsSize? = nil, no-rotate: Bool? = nil, crop: VipsInteresting? = nil, linear: Bool? = nil, import-profile: String? = nil, export-profile: String? = nil, intent: VipsIntent? = nil, fail-on: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("buffer", value: buffer)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            if let option-string = option-string {
                opt.set("option-string", value: option-string)
            }
            if let height = height {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if let no-rotate = no-rotate {
                opt.set("no-rotate", value: no-rotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if let linear = linear {
                opt.set("linear", value: linear)
            }
            if let import-profile = import-profile {
                opt.set("import-profile", value: import-profile)
            }
            if let export-profile = export-profile {
                opt.set("export-profile", value: export-profile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let fail-on = fail-on {
                opt.set("fail-on", value: fail-on)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail_buffer", options: &opt)
        }
    }

    /// generate thumbnail from image
    public func thumbnailImage(nickname: String? = nil, description: String? = nil, width: Int, height: Int? = nil, size: VipsSize? = nil, no-rotate: Bool? = nil, crop: VipsInteresting? = nil, linear: Bool? = nil, import-profile: String? = nil, export-profile: String? = nil, intent: VipsIntent? = nil, fail-on: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            if let height = height {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if let no-rotate = no-rotate {
                opt.set("no-rotate", value: no-rotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if let linear = linear {
                opt.set("linear", value: linear)
            }
            if let import-profile = import-profile {
                opt.set("import-profile", value: import-profile)
            }
            if let export-profile = export-profile {
                opt.set("export-profile", value: export-profile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let fail-on = fail-on {
                opt.set("fail-on", value: fail-on)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail_image", options: &opt)
        }
    }

    /// generate thumbnail from source
    public static func thumbnailSource(source: Any, nickname: String? = nil, description: String? = nil, width: Int, option-string: String? = nil, height: Int? = nil, size: VipsSize? = nil, no-rotate: Bool? = nil, crop: VipsInteresting? = nil, linear: Bool? = nil, import-profile: String? = nil, export-profile: String? = nil, intent: VipsIntent? = nil, fail-on: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            if let option-string = option-string {
                opt.set("option-string", value: option-string)
            }
            if let height = height {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if let no-rotate = no-rotate {
                opt.set("no-rotate", value: no-rotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if let linear = linear {
                opt.set("linear", value: linear)
            }
            if let import-profile = import-profile {
                opt.set("import-profile", value: import-profile)
            }
            if let export-profile = export-profile {
                opt.set("export-profile", value: export-profile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let fail-on = fail-on {
                opt.set("fail-on", value: fail-on)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail_source", options: &opt)
        }
    }

    /// resample with a map image
    public func mapim(nickname: String? = nil, description: String? = nil, index: VIPSImage, interpolate: Any? = nil, background: [Double]? = nil, premultiplied: Bool? = nil, extend: VipsExtend? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("index", value: index)
            if let interpolate = interpolate {
                opt.set("interpolate", value: interpolate)
            }
            if let background = background {
                opt.set("background", value: background)
            }
            if let premultiplied = premultiplied {
                opt.set("premultiplied", value: premultiplied)
            }
            if let extend = extend {
                opt.set("extend", value: extend)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("mapim", options: &opt)
        }
    }

    /// resample an image with a quadratic transform
    public func quadratic(nickname: String? = nil, description: String? = nil, coeff: VIPSImage, interpolate: Any? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("coeff", value: coeff)
            if let interpolate = interpolate {
                opt.set("interpolate", value: interpolate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("quadratic", options: &opt)
        }
    }

    /// map an image though a lut
    public func maplut(nickname: String? = nil, description: String? = nil, lut: VIPSImage, band: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("lut", value: lut)
            if let band = band {
                opt.set("band", value: band)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("maplut", options: &opt)
        }
    }

    /// use pixel values to pick cases from an array of images
    public static func case(index: VIPSImage, nickname: String? = nil, cases: [VIPSImage], description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("index", value: index)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("cases", value: cases)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("case", options: &opt)
        }
    }

    /// find threshold for percent of pixels
    public func percent(nickname: String? = nil, percent: Double, description: String? = nil) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("percent", value: percent)
            if let description = description {
                opt.set("description", value: description)
            }

            try VIPSImage.call("percent", options: &opt)
        }
    }

    /// statistical difference
    public func stdif(nickname: String? = nil, s0: Double? = nil, b: Double? = nil, m0: Double? = nil, a: Double? = nil, description: String? = nil, width: Int, height: Int) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let s0 = s0 {
                opt.set("s0", value: s0)
            }
            if let b = b {
                opt.set("b", value: b)
            }
            if let m0 = m0 {
                opt.set("m0", value: m0)
            }
            if let a = a {
                opt.set("a", value: a)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            opt.set("height", value: height)
            opt.set("out", value: &out)

            try VIPSImage.call("stdif", options: &opt)
        }
    }

    /// convolve with rotating mask
    public func compass(nickname: String? = nil, description: String? = nil, mask: VIPSImage, times: Int? = nil, angle: VipsAngle45? = nil, combine: VipsCombine? = nil, precision: VipsPrecision? = nil, layers: Int? = nil, cluster: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: mask)
            if let times = times {
                opt.set("times", value: times)
            }
            if let angle = angle {
                opt.set("angle", value: angle)
            }
            if let combine = combine {
                opt.set("combine", value: combine)
            }
            if let precision = precision {
                opt.set("precision", value: precision)
            }
            if let layers = layers {
                opt.set("layers", value: layers)
            }
            if let cluster = cluster {
                opt.set("cluster", value: cluster)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("compass", options: &opt)
        }
    }

    /// fast correlation
    public func fastcor(nickname: String? = nil, description: String? = nil, ref: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("ref", value: ref)
            opt.set("out", value: &out)

            try VIPSImage.call("fastcor", options: &opt)
        }
    }

    /// spatial correlation
    public func spcor(nickname: String? = nil, description: String? = nil, ref: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("ref", value: ref)
            opt.set("out", value: &out)

            try VIPSImage.call("spcor", options: &opt)
        }
    }

    /// Scharr edge detector
    public func scharr(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("scharr", options: &opt)
        }
    }

    /// Prewitt edge detector
    public func prewitt(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("prewitt", options: &opt)
        }
    }

    /// Canny edge detector
    public func canny(nickname: String? = nil, description: String? = nil, sigma: Double? = nil, precision: VipsPrecision? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let sigma = sigma {
                opt.set("sigma", value: sigma)
            }
            if let precision = precision {
                opt.set("precision", value: precision)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("canny", options: &opt)
        }
    }

    /// forward FFT
    public func fwfft(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("fwfft", options: &opt)
        }
    }

    /// inverse FFT
    public func invfft(nickname: String? = nil, description: String? = nil, real: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let real = real {
                opt.set("real", value: real)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("invfft", options: &opt)
        }
    }

    /// frequency-domain filtering
    public func freqmult(mask: VIPSImage, nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("mask", value: mask)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("freqmult", options: &opt)
        }
    }

    /// make displayable power spectrum
    public func spectrum(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("spectrum", options: &opt)
        }
    }

    /// calculate phase correlation
    public func phasecor(in2: VIPSImage, nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("in2", value: in2)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("phasecor", options: &opt)
        }
    }

    /// rank filter
    public func rank(nickname: String? = nil, description: String? = nil, width: Int, height: Int, index: Int) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("width", value: width)
            opt.set("height", value: height)
            opt.set("index", value: index)
            opt.set("out", value: &out)

            try VIPSImage.call("rank", options: &opt)
        }
    }

    /// count lines in an image
    public func countlines(nickname: String? = nil, description: String? = nil, direction: VipsDirection) throws {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("direction", value: direction)

            try VIPSImage.call("countlines", options: &opt)
        }
    }

    /// label regions in an image
    public func labelregions(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("mask", value: &out)

            try VIPSImage.call("labelregions", options: &opt)
        }
    }

    /// fill image zeros with nearest non-zero pixel
    public func fillNearest(nickname: String? = nil, description: String? = nil) throws -> (out: VIPSImage, distance: VIPSImage) {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("fill_nearest", options: &opt)
        }
    }

    /// merge two images
    public static func merge(ref: VIPSImage, nickname: String? = nil, sec: VIPSImage, description: String? = nil, direction: VipsDirection, dx: Int, dy: Int, mblend: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("ref", value: ref)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("sec", value: sec)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("direction", value: direction)
            opt.set("dx", value: dx)
            opt.set("dy", value: dy)
            if let mblend = mblend {
                opt.set("mblend", value: mblend)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("merge", options: &opt)
        }
    }

    /// mosaic two images
    public static func mosaic(ref: VIPSImage, nickname: String? = nil, sec: VIPSImage, description: String? = nil, direction: VipsDirection, xref: Int, yref: Int, xsec: Int, ysec: Int, hwindow: Int? = nil, harea: Int? = nil, mblend: Int? = nil, bandno: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("ref", value: ref)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("sec", value: sec)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("direction", value: direction)
            opt.set("xref", value: xref)
            opt.set("yref", value: yref)
            opt.set("xsec", value: xsec)
            opt.set("ysec", value: ysec)
            if let hwindow = hwindow {
                opt.set("hwindow", value: hwindow)
            }
            if let harea = harea {
                opt.set("harea", value: harea)
            }
            if let mblend = mblend {
                opt.set("mblend", value: mblend)
            }
            if let bandno = bandno {
                opt.set("bandno", value: bandno)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("mosaic", options: &opt)
        }
    }

    /// first-order mosaic of two images
    public static func mosaic1(ref: VIPSImage, nickname: String? = nil, sec: VIPSImage, description: String? = nil, direction: VipsDirection, xr1: Int, yr1: Int, xs1: Int, ys1: Int, xr2: Int, yr2: Int, xs2: Int, ys2: Int, hwindow: Int? = nil, harea: Int? = nil, search: Bool? = nil, interpolate: Any? = nil, mblend: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("ref", value: ref)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("sec", value: sec)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("direction", value: direction)
            opt.set("xr1", value: xr1)
            opt.set("yr1", value: yr1)
            opt.set("xs1", value: xs1)
            opt.set("ys1", value: ys1)
            opt.set("xr2", value: xr2)
            opt.set("yr2", value: yr2)
            opt.set("xs2", value: xs2)
            opt.set("ys2", value: ys2)
            if let hwindow = hwindow {
                opt.set("hwindow", value: hwindow)
            }
            if let harea = harea {
                opt.set("harea", value: harea)
            }
            if let search = search {
                opt.set("search", value: search)
            }
            if let interpolate = interpolate {
                opt.set("interpolate", value: interpolate)
            }
            if let mblend = mblend {
                opt.set("mblend", value: mblend)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("mosaic1", options: &opt)
        }
    }

    /// invert an matrix
    public func matrixinvert(nickname: String? = nil, description: String? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("matrixinvert", options: &opt)
        }
    }

    /// first-order match of two images
    public static func match(ref: VIPSImage, nickname: String? = nil, sec: VIPSImage, description: String? = nil, xr1: Int, yr1: Int, xs1: Int, ys1: Int, xr2: Int, yr2: Int, xs2: Int, ys2: Int, hwindow: Int? = nil, harea: Int? = nil, search: Bool? = nil, interpolate: Any? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("ref", value: ref)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            opt.set("sec", value: sec)
            if let description = description {
                opt.set("description", value: description)
            }
            opt.set("xr1", value: xr1)
            opt.set("yr1", value: yr1)
            opt.set("xs1", value: xs1)
            opt.set("ys1", value: ys1)
            opt.set("xr2", value: xr2)
            opt.set("yr2", value: yr2)
            opt.set("xs2", value: xs2)
            opt.set("ys2", value: ys2)
            if let hwindow = hwindow {
                opt.set("hwindow", value: hwindow)
            }
            if let harea = harea {
                opt.set("harea", value: harea)
            }
            if let search = search {
                opt.set("search", value: search)
            }
            if let interpolate = interpolate {
                opt.set("interpolate", value: interpolate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("match", options: &opt)
        }
    }

    /// global balance an image mosaic
    public func globalbalance(nickname: String? = nil, description: String? = nil, gamma: Double? = nil, int-output: Bool? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if let nickname = nickname {
                opt.set("nickname", value: nickname)
            }
            if let description = description {
                opt.set("description", value: description)
            }
            if let gamma = gamma {
                opt.set("gamma", value: gamma)
            }
            if let int-output = int-output {
                opt.set("int-output", value: int-output)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("globalbalance", options: &opt)
        }
    }

}

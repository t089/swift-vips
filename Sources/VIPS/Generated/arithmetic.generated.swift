//
//  arithmetic.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Transform float lab to signed short
    public func Lab2LabS() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("Lab2LabS", options: &opt)
        }
    }

    /// Unpack a labq image to short lab
    public func LabQ2LabS() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("LabQ2LabS", options: &opt)
        }
    }

    /// Transform signed short lab to float
    public func LabS2Lab() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("LabS2Lab", options: &opt)
        }
    }

    /// Transform short lab to labq coding
    public func LabS2LabQ() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("LabS2LabQ", options: &opt)
        }
    }

    /// Absolute value of an image
    public func abs() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("abs", options: &opt)
        }
    }

    /// Add two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    public func add(`right`: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("out", value: &out)

            try VIPSImage.call("add", options: &opt)
        }
    }

    /// Find image average
    public func avg() throws -> Double {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)

            try VIPSImage.call("avg", options: &opt)
        }
    }

    /// Boolean operation on two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    ///   - boolean: Boolean to perform
    public func boolean(`right`: VIPSImage, boolean: VipsOperationBoolean) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("boolean", value: boolean)
            opt.set("out", value: &out)

            try VIPSImage.call("boolean", options: &opt)
        }
    }

    /// Boolean operations against a constant
    ///
    /// - Parameters:
    ///   - boolean: Boolean to perform
    ///   - c: Array of constants
    public func booleanConst(boolean: VipsOperationBoolean, c: [Double]) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("boolean", value: boolean)
            opt.set("c", value: c)
            opt.set("out", value: &out)

            try VIPSImage.call("boolean_const", options: &opt)
        }
    }

    /// Perform a complex operation on an image
    ///
    /// - Parameters:
    ///   - cmplx: Complex to perform
    public func complex(cmplx: VipsOperationComplex) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("cmplx", value: cmplx)
            opt.set("out", value: &out)

            try VIPSImage.call("complex", options: &opt)
        }
    }

    /// Complex binary operations on two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    ///   - cmplx: Binary complex operation to perform
    public func complex2(`right`: VIPSImage, cmplx: VipsOperationComplex2) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("cmplx", value: cmplx)
            opt.set("out", value: &out)

            try VIPSImage.call("complex2", options: &opt)
        }
    }

    /// Form a complex image from two real images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    public func complexform(`right`: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("out", value: &out)

            try VIPSImage.call("complexform", options: &opt)
        }
    }

    /// Get a component from a complex image
    ///
    /// - Parameters:
    ///   - `get`: Complex to perform
    public func complexget(`get`: VipsOperationComplexget) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("get", value: `get`)
            opt.set("out", value: &out)

            try VIPSImage.call("complexget", options: &opt)
        }
    }

    /// Find image standard deviation
    public func deviate() throws -> Double {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)

            try VIPSImage.call("deviate", options: &opt)
        }
    }

    /// Divide two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    public func divide(`right`: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("out", value: &out)

            try VIPSImage.call("divide", options: &opt)
        }
    }

    /// Invert an image
    public func invert() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("invert", options: &opt)
        }
    }

    /// Build an inverted look-up table
    ///
    /// - Parameters:
    ///   - size: LUT size to generate
    public func invertlut(size: Int = 0) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if size != 0 {
                opt.set("size", value: size)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("invertlut", options: &opt)
        }
    }

    /// Calculate (a * in + b)
    ///
    /// - Parameters:
    ///   - a: Multiply by this
    ///   - b: Add this
    ///   - uchar: Output should be uchar
    public func linear(a: [Double], b: [Double], uchar: Bool = false) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("a", value: a)
            opt.set("b", value: b)
            if uchar != false {
                opt.set("uchar", value: uchar)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("linear", options: &opt)
        }
    }

    /// Apply a math operation to an image
    ///
    /// - Parameters:
    ///   - math: Math to perform
    public func math(math: VipsOperationMath) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("math", value: math)
            opt.set("out", value: &out)

            try VIPSImage.call("math", options: &opt)
        }
    }

    /// Binary math operations
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    ///   - math2: Math to perform
    public func math2(`right`: VIPSImage, math2: VipsOperationMath2) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("math2", value: math2)
            opt.set("out", value: &out)

            try VIPSImage.call("math2", options: &opt)
        }
    }

    /// Binary math operations with a constant
    ///
    /// - Parameters:
    ///   - math2: Math to perform
    ///   - c: Array of constants
    public func math2Const(math2: VipsOperationMath2, c: [Double]) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("math2", value: math2)
            opt.set("c", value: c)
            opt.set("out", value: &out)

            try VIPSImage.call("math2_const", options: &opt)
        }
    }

    /// Invert an matrix
    public func matrixinvert() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("matrixinvert", options: &opt)
        }
    }

    /// Find image maximum
    ///
    /// - Parameters:
    ///   - size: Number of maximum values to find
    public func max(size: Int = 0) throws -> Double {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if size != 0 {
                opt.set("size", value: size)
            }

            try VIPSImage.call("max", options: &opt)
        }
    }

    /// Find image minimum
    ///
    /// - Parameters:
    ///   - size: Number of minimum values to find
    public func min(size: Int = 0) throws -> Double {
        try VIPSImage.execute {
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if size != 0 {
                opt.set("size", value: size)
            }

            try VIPSImage.call("min", options: &opt)
        }
    }

    /// Multiply two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    public func multiply(`right`: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("out", value: &out)

            try VIPSImage.call("multiply", options: &opt)
        }
    }

    /// Premultiply image alpha
    ///
    /// - Parameters:
    ///   - maxAlpha: Maximum value of alpha channel
    public func premultiply(maxAlpha: Double = 0.0) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if maxAlpha != 0.0 {
                opt.set("max_alpha", value: maxAlpha)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("premultiply", options: &opt)
        }
    }

    /// Relational operation on two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    ///   - relational: Relational to perform
    public func relational(`right`: VIPSImage, relational: VipsOperationRelational) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("relational", value: relational)
            opt.set("out", value: &out)

            try VIPSImage.call("relational", options: &opt)
        }
    }

    /// Relational operations against a constant
    ///
    /// - Parameters:
    ///   - relational: Relational to perform
    ///   - c: Array of constants
    public func relationalConst(relational: VipsOperationRelational, c: [Double]) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("relational", value: relational)
            opt.set("c", value: c)
            opt.set("out", value: &out)

            try VIPSImage.call("relational_const", options: &opt)
        }
    }

    /// Remainder after integer division of two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    public func remainder(`right`: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("out", value: &out)

            try VIPSImage.call("remainder", options: &opt)
        }
    }

    /// Remainder after integer division of an image and a constant
    ///
    /// - Parameters:
    ///   - c: Array of constants
    public func remainderConst(c: [Double]) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("c", value: c)
            opt.set("out", value: &out)

            try VIPSImage.call("remainder_const", options: &opt)
        }
    }

    /// Perform a round function on an image
    ///
    /// - Parameters:
    ///   - round: Rounding operation to perform
    public func round(round: VipsOperationRound) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("round", value: round)
            opt.set("out", value: &out)

            try VIPSImage.call("round", options: &opt)
        }
    }

    /// Unit vector of pixel
    public func sign() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("sign", options: &opt)
        }
    }

    /// Find many image stats
    public func stats() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("stats", options: &opt)
        }
    }

    /// Subtract two images
    ///
    /// - Parameters:
    ///   - `right`: Right-hand image argument
    public func subtract(`right`: VIPSImage) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("left", value: self.image)
            opt.set("right", value: `right`)
            opt.set("out", value: &out)

            try VIPSImage.call("subtract", options: &opt)
        }
    }

    /// Sum an array of images
    ///
    /// - Parameters:
    ///   - `in`: Array of input images
    public static func sum(`in`: [VIPSImage]) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("in", value: `in`)
            opt.set("out", value: &out)

            try VIPSImage.call("sum", options: &opt)
        }
    }

    /// Unpremultiply image alpha
    ///
    /// - Parameters:
    ///   - maxAlpha: Maximum value of alpha channel
    ///   - alphaBand: Unpremultiply with this alpha
    public func unpremultiply(maxAlpha: Double = 0.0, alphaBand: Int = 0) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            if maxAlpha != 0.0 {
                opt.set("max_alpha", value: maxAlpha)
            }
            if alphaBand != 0 {
                opt.set("alpha_band", value: alphaBand)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("unpremultiply", options: &opt)
        }
    }

}

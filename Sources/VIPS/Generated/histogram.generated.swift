//
//  histogram.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Form cumulative histogram
    public func histCum() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("out", value: &out)

            try VIPSImage.call("hist_cum", options: &opt)
        }
    }

    /// Estimate image entropy
    public func histEntropy() throws -> Double {
        var opt = VIPSOption()

        var out: Double = 0.0

            opt.set("in", value: self.image)
            opt.set("out", value: &out)

            try VIPSImage.call("hist_entropy", options: &opt)

        return out
    }

    /// Histogram equalisation
    ///
    /// - Parameters:
    ///   - band: Equalise with this band
    public func histEqual(band: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            if let band = band {
                opt.set("band", value: band)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_equal", options: &opt)
        }
    }

    /// Find image histogram
    ///
    /// - Parameters:
    ///   - band: Find histogram of band
    public func histFind(band: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            if let band = band {
                opt.set("band", value: band)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_find", options: &opt)
        }
    }

    /// Find indexed image histogram
    ///
    /// - Parameters:
    ///   - index: Index image
    ///   - combine: Combine bins like this
    public func histFindIndexed(index: VIPSImage, combine: VipsCombine? = nil) throws -> VIPSImage {
        return try VIPSImage([self, index]) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("index", value: index)
            if let combine = combine {
                opt.set("combine", value: combine)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_find_indexed", options: &opt)
        }
    }

    /// Find n-dimensional image histogram
    ///
    /// - Parameters:
    ///   - bins: Number of bins in each dimension
    public func histFindNdim(bins: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            if let bins = bins {
                opt.set("bins", value: bins)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_find_ndim", options: &opt)
        }
    }

    /// Test for monotonicity
    public func histIsmonotonic() throws -> Bool {
        var opt = VIPSOption()

        var out: Bool = false

            opt.set("in", value: self.image)
            opt.set("monotonic", value: &out)

            try VIPSImage.call("hist_ismonotonic", options: &opt)

        return out
    }

    /// Local histogram equalisation
    ///
    /// - Parameters:
    ///   - width: Window width in pixels
    ///   - height: Window height in pixels
    ///   - maxSlope: Maximum slope (CLAHE)
    public func histLocal(width: Int, height: Int, maxSlope: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("width", value: width)
            opt.set("height", value: height)
            if let maxSlope = maxSlope {
                opt.set("max_slope", value: maxSlope)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hist_local", options: &opt)
        }
    }

    /// Match two histograms
    ///
    /// - Parameters:
    ///   - ref: Reference histogram
    public func histMatch(ref: VIPSImage) throws -> VIPSImage {
        return try VIPSImage([self, ref]) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("ref", value: ref)
            opt.set("out", value: &out)

            try VIPSImage.call("hist_match", options: &opt)
        }
    }

    /// Normalise histogram
    public func histNorm() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("out", value: &out)

            try VIPSImage.call("hist_norm", options: &opt)
        }
    }

    /// Plot histogram
    public func histPlot() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("out", value: &out)

            try VIPSImage.call("hist_plot", options: &opt)
        }
    }

    /// Find hough circle transform
    ///
    /// - Parameters:
    ///   - scale: Scale down dimensions by this factor
    ///   - minRadius: Smallest radius to search for
    ///   - maxRadius: Largest radius to search for
    public func houghCircle(scale: Int? = nil, minRadius: Int? = nil, maxRadius: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            if let scale = scale {
                opt.set("scale", value: scale)
            }
            if let minRadius = minRadius {
                opt.set("min_radius", value: minRadius)
            }
            if let maxRadius = maxRadius {
                opt.set("max_radius", value: maxRadius)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hough_circle", options: &opt)
        }
    }

    /// Find hough line transform
    ///
    /// - Parameters:
    ///   - width: Horizontal size of parameter space
    ///   - height: Vertical size of parameter space
    public func houghLine(width: Int? = nil, height: Int? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            if let width = width {
                opt.set("width", value: width)
            }
            if let height = height {
                opt.set("height", value: height)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("hough_line", options: &opt)
        }
    }

    /// Convert the two input images to Fourier space, calculate phase-correlation,
    /// back to real space.
    ///
    /// See also: vips_fwfft(), vips_cross_phase(),
    ///
    /// Returns: 0 on success, -1 on error.
    ///
    /// - Parameters:
    ///   - in2: Second input image
    public func phasecor(in2: VIPSImage) throws -> VIPSImage {
        return try VIPSImage([self, in2]) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("in2", value: in2)
            opt.set("out", value: &out)

            try VIPSImage.call("phasecor", options: &opt)
        }
    }

    /// Make displayable power spectrum
    public func spectrum() throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self)
            opt.set("out", value: &out)

            try VIPSImage.call("spectrum", options: &opt)
        }
    }

}

//
//  resample.generated.swift
//
//  Generated by VIPS Swift Code Generator
//  DO NOT EDIT - This file is automatically generated
//

import Cvips

extension VIPSImage {

    /// Resample with a map image
    ///
    /// - Parameters:
    ///   - index: Index pixels with this
    ///   - interpolate: Interpolate pixels with this
    ///   - background: Background value
    ///   - premultiplied: Images have premultiplied alpha
    ///   - extend: How to generate the extra pixels
    public func mapim(index: VIPSImage, interpolate: VIPSInterpolate? = nil, background: [Double] = [], premultiplied: Bool = false, extend: VipsExtend? = nil) throws -> VIPSImage {
        return try VIPSImage([self, index]) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("index", value: index.image)
            if let interpolate = interpolate {
                opt.set("interpolate", value: interpolate)
            }
            if background != [] {
                opt.set("background", value: background)
            }
            if premultiplied != false {
                opt.set("premultiplied", value: premultiplied)
            }
            if let extend = extend {
                opt.set("extend", value: extend)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("mapim", options: &opt)
        }
    }

    /// Resample an image with a quadratic transform
    ///
    /// - Parameters:
    ///   - coeff: Coefficient matrix
    ///   - interpolate: Interpolate values with this
    public func quadratic(coeff: VIPSImage, interpolate: VIPSInterpolate? = nil) throws -> VIPSImage {
        return try VIPSImage([self, coeff]) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("coeff", value: coeff.image)
            if let interpolate = interpolate {
                opt.set("interpolate", value: interpolate)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("quadratic", options: &opt)
        }
    }

    /// Generate thumbnail from file
    ///
    /// - Parameters:
    ///   - filename: Filename to read from
    ///   - width: Size to this width
    ///   - height: Size to this height
    ///   - size: Only upsize, only downsize, or both
    ///   - noRotate: Don't use orientation tags to rotate image upright
    ///   - crop: Reduce to fill target rectangle, then crop
    ///   - linear: Reduce in linear light
    ///   - importProfile: Fallback import profile
    ///   - exportProfile: Fallback export profile
    ///   - intent: Rendering intent
    ///   - failOn: Error level to fail on
    public static func thumbnail(filename: String, width: Int, height: Int = 0, size: VipsSize? = nil, noRotate: Bool = false, crop: VipsInteresting? = nil, linear: Bool = false, importProfile: String = "", exportProfile: String = "", intent: VipsIntent? = nil, failOn: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("filename", value: filename)
            opt.set("width", value: width)
            if height != 0 {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if noRotate != false {
                opt.set("no_rotate", value: noRotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if linear != false {
                opt.set("linear", value: linear)
            }
            if importProfile != "" {
                opt.set("import_profile", value: importProfile)
            }
            if exportProfile != "" {
                opt.set("export_profile", value: exportProfile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail", options: &opt)
        }
    }

    /// Generate thumbnail from buffer
    ///
    /// - Parameters:
    ///   - buffer: Buffer to load from
    ///   - width: Size to this width
    ///   - optionString: Options that are passed on to the underlying loader
    ///   - height: Size to this height
    ///   - size: Only upsize, only downsize, or both
    ///   - noRotate: Don't use orientation tags to rotate image upright
    ///   - crop: Reduce to fill target rectangle, then crop
    ///   - linear: Reduce in linear light
    ///   - importProfile: Fallback import profile
    ///   - exportProfile: Fallback export profile
    ///   - intent: Rendering intent
    ///   - failOn: Error level to fail on
    public static func thumbnailBuffer(buffer: Data, width: Int, optionString: String = "", height: Int = 0, size: VipsSize? = nil, noRotate: Bool = false, crop: VipsInteresting? = nil, linear: Bool = false, importProfile: String = "", exportProfile: String = "", intent: VipsIntent? = nil, failOn: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("buffer", value: buffer)
            opt.set("width", value: width)
            if optionString != "" {
                opt.set("option_string", value: optionString)
            }
            if height != 0 {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if noRotate != false {
                opt.set("no_rotate", value: noRotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if linear != false {
                opt.set("linear", value: linear)
            }
            if importProfile != "" {
                opt.set("import_profile", value: importProfile)
            }
            if exportProfile != "" {
                opt.set("export_profile", value: exportProfile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail_buffer", options: &opt)
        }
    }

    /// Generate thumbnail from image
    ///
    /// - Parameters:
    ///   - width: Size to this width
    ///   - height: Size to this height
    ///   - size: Only upsize, only downsize, or both
    ///   - noRotate: Don't use orientation tags to rotate image upright
    ///   - crop: Reduce to fill target rectangle, then crop
    ///   - linear: Reduce in linear light
    ///   - importProfile: Fallback import profile
    ///   - exportProfile: Fallback export profile
    ///   - intent: Rendering intent
    ///   - failOn: Error level to fail on
    public func thumbnailImage(width: Int, height: Int = 0, size: VipsSize? = nil, noRotate: Bool = false, crop: VipsInteresting? = nil, linear: Bool = false, importProfile: String = "", exportProfile: String = "", intent: VipsIntent? = nil, failOn: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(self) { out in
            var opt = VIPSOption()

            opt.set("in", value: self.image)
            opt.set("width", value: width)
            if height != 0 {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if noRotate != false {
                opt.set("no_rotate", value: noRotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if linear != false {
                opt.set("linear", value: linear)
            }
            if importProfile != "" {
                opt.set("import_profile", value: importProfile)
            }
            if exportProfile != "" {
                opt.set("export_profile", value: exportProfile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail_image", options: &opt)
        }
    }

    /// Generate thumbnail from source
    ///
    /// - Parameters:
    ///   - source: Source to load from
    ///   - width: Size to this width
    ///   - optionString: Options that are passed on to the underlying loader
    ///   - height: Size to this height
    ///   - size: Only upsize, only downsize, or both
    ///   - noRotate: Don't use orientation tags to rotate image upright
    ///   - crop: Reduce to fill target rectangle, then crop
    ///   - linear: Reduce in linear light
    ///   - importProfile: Fallback import profile
    ///   - exportProfile: Fallback export profile
    ///   - intent: Rendering intent
    ///   - failOn: Error level to fail on
    public static func thumbnailSource(source: VIPSSource, width: Int, optionString: String = "", height: Int = 0, size: VipsSize? = nil, noRotate: Bool = false, crop: VipsInteresting? = nil, linear: Bool = false, importProfile: String = "", exportProfile: String = "", intent: VipsIntent? = nil, failOn: VipsFailOn? = nil) throws -> VIPSImage {
        return try VIPSImage(nil) { out in
            var opt = VIPSOption()

            opt.set("source", value: source)
            opt.set("width", value: width)
            if optionString != "" {
                opt.set("option_string", value: optionString)
            }
            if height != 0 {
                opt.set("height", value: height)
            }
            if let size = size {
                opt.set("size", value: size)
            }
            if noRotate != false {
                opt.set("no_rotate", value: noRotate)
            }
            if let crop = crop {
                opt.set("crop", value: crop)
            }
            if linear != false {
                opt.set("linear", value: linear)
            }
            if importProfile != "" {
                opt.set("import_profile", value: importProfile)
            }
            if exportProfile != "" {
                opt.set("export_profile", value: exportProfile)
            }
            if let intent = intent {
                opt.set("intent", value: intent)
            }
            if let failOn = failOn {
                opt.set("fail_on", value: failOn)
            }
            opt.set("out", value: &out)

            try VIPSImage.call("thumbnail_source", options: &opt)
        }
    }

}
